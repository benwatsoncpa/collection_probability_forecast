{
    "collab_server" : "",
    "contents" : "# R Setup ---------------------------------------------------------------------\n    # Reset workspace & Load Libraries ----------------------------------------\n    rm(list=ls())\n    for (i in 1:50) gc(reset=TRUE)\n    t1 <- proc.time()\n    \n    library(RODBC)\n    library(data.table)\n    library(zoo)\n    library(tm)\n    library(dplyr)\n    library(tidyr)\n    library(ggplot2)\n    library(scales)\n    library(caret)\n    library(caretEnsemble)\n    \n    # Connect to the ARRMS Database --------------------------------------------\n    arrm<-odbcConnect(\"ARRM64\",\n                      uid=\"arrm_frms_ro\",\n                      pwd=\"ntU7n_P\",\n                      believeNRows=FALSE)\n    # Set up the names of the table -------------------------------------------\n    \n    names.string <- c(\"receivable\",\"isactive\",\"applied\",\"incurred\",\n                      \"balance\",\"amount\",\"type\",\"subtype\")\n    \n    # Field names to be added\n    \n    # yfinal = Final Amount Recovered / Total Defaulted\n    # ycurrent = Current Amount Recovered / Total Defaulted\n    \n# Get data from ARRM database -------------------------------------------------\n    # Get Transactions --------------------------------------------------------\n    tr <- data.table(sqlQuery(arrm,\n                              source(file=\"sql/Transactions.sql\"),\n                              stringsAsFactors=FALSE))\n    # Rename columns\n    names(tr) <- names.string\n  \n    # Negate positive deletion amounts\n    tr <- tr[subtype==\"Deletion Adjustment\" & amount > 0,amount:=-amount]\n    tr$balance <- gsub(\"Administrative Charge\",\"Admin\",tr$balance)\n    \n    # Get Transferred-In Amounts ----------------------------------------------\n    ti<- data.table(sqlQuery(arrm,\n                             source(file=\"sql/TransferIns.sql\"),\n                             stringsAsFactors=FALSE))\n    \n    # Rename columns\n    names(ti) <- names.string\n    \n    # Clean up NAs\n    ti[is.na(amount),amount:=0]\n    ti[is.na(applied),applied:=incurred]\n        \n    \n    # Get Welcome Letters -----------------------------------------------------\n    wl <- data.table(sqlQuery(arrm,source(file=\"sql/WelcomeLetters.sql\"),\n                              stringsAsFactors=FALSE))\n    \n    # Rename columns\n    names(wl) <- names.string\n    \n    # Clean up NAs\n    wl <- wl[!is.na(applied)]\n    \n    # Get Cases ---------------------------------------------------------------\n    cs <- data.table(sqlQuery(arrm,\n                              source(file=\"sql/Cases.sql\"),\n                              stringsAsFactors=FALSE))\n    \n    # Rename columns\n    names(cs) <- names.string\n    \n    # Remove spaces and forward slashes\n    cs <- cs[,subtype:=gsub(' ','',subtype)]\n    cs <- cs[,subtype:=gsub('\\\\/','',subtype)]\n        \n    # Get Repayment Plans -----------------------------------------------------\n    rp <- data.table(sqlQuery(arrm,\n                              source(file=\"sql/RepaymentPlans.sql\"),\n                              stringsAsFactors=FALSE))\n    # Rename columns\n    names(rp) <- names.string\n\n    # Get Documents -----------------------------------------------------------\n    dc <- data.table(sqlQuery(arrm,\n                              source(file=\"sql/Documents.sql\"),\n                              stringsAsFactors=FALSE))\n    # Rename columns\n    names(dc) <- names.string\n    \n    # Get Notes ---------------------------------------------------------------\n    nt <- data.table(sqlQuery(arrm,\n                              source(file=\"sql/ReceivableNotes.sql\"),\n                              stringsAsFactors=FALSE))\n    \n        # Rename columns\n        names(nt) <- names.string\n    \n    \n    # Get Receivable Statuses Detail ------------------------------------------\n    \n    rs <- data.table(sqlQuery(arrm,\n                              source(file=\"sql/ReceivableStatusDetail.sql\"),\n                              stringsAsFactors=FALSE))\n        \n        # Rename columns\n        names(rs) <- c(\"receivable\",\"eff.date\",\"isactive\")\n        \n        # Set effective date to sometime in future if acting\n        rs <- rs[isactive==1,eff.date:=as.POSIXct(Sys.Date()+365,tz=\"EST\")]\n        rs <- select(rs,-isactive)\n        \n        # Merge with tr and overwrite eff.date if tr$applied date is higher\n        tr.applied.max <- tr %>%\n          group_by(receivable) %>%\n          summarise(applied=max(applied))\n        \n        rs <- merge(rs,tr.applied.max,by=\"receivable\",all.x=TRUE)\n        rs$eff.date <- pmax(rs$eff.date,rs$applied,na.rm = TRUE) # see note\n        rs <- select(rs,-applied)\n        \n        # Note: This is done because the status effective dates in the \n        # ARRM_RECEIVABLE table are incorrect in many cases. \n        \n# Data preparation & cleansing ------------------------------------------------\n    # Merge all imported ARRM tables ------------------------------------------\n    df <- setDT(rbind(tr,ti,wl,cs,rp,dc,nt))\n    df.backup <- df\n    \n    \n    # Calculate the number of days between applied and incurred ---------------    \n    df <-df[,Days:=as.numeric(applied-incurred,units=\"days\")]\n    \n    # Remove rows before incur/transfer in date -------------------------------    \n    default.dates <- distinct(select(ti,receivable,default.date=applied))\n    df <- merge(df,default.dates,by=c(\"receivable\"),all.x=TRUE)\n    df <- filter(df,applied >= default.date)\n    df <- setDT(df)\n    \n    # Remove rows after receivable inactive date ------------------------------\n    df <- merge(df,rs,by=c(\"receivable\"),all.x=TRUE,fill=NA)\n    \n    df <- df %>% \n      mutate(before.inactive = applied <= eff.date) %>%\n      group_by(receivable) %>%\n      mutate(active.cnt = sum(before.inactive==TRUE))\n    \n    # Tidy up -----------------------------------------------------------------\n    df <- select(df,-default.date,-eff.date)\n    rm(list=setdiff(ls(), c(\"df\",\"t1\")))\n    for (i in 1:50) gc(reset=TRUE)\n    \n    # Remove spaces and punctuation from subtype column -----------------------\n    df$subtype <- removePunctuation(df$subtype)\n    df$subtype <- gsub(' ','',df$subtype)\n    \n    # Create new features with dcast-------------------------------------------\n    df <- setDT(df)\n    df.balancesubtype <- dcast(df,isactive+receivable+incurred+applied+Days~\n                               balance+type+subtype,fun.aggregate=sum,\n                               sep=\"_\",value.var=\"amount\")\n    \n    df.balancetype <- dcast(df,isactive+receivable+incurred+applied+Days~balance+type,\n                               fun.aggregate=sum,sep=\"_\",value.var=\"amount\")\n    \n    df.balance <- dcast(df,isactive+receivable+incurred+applied+Days~balance,\n                        fun.aggregate=sum,sep=\"_\",value.var=\"amount\")\n    \n    df.type <- dcast(df,isactive+receivable+incurred+applied+Days~type,\n                     fun.aggregate=sum,sep=\"_\",value.var=\"amount\")\n    \n    # Merge new dcast features together --------------------------------------\n    \n    merge.list <- list(df.balancesubtype,df.balancetype,df.balance,df.type)\n    df <- Reduce(function(x,y) merge(x,\n                                     y,\n                                     by=c(\"isactive\",\n                                          \"receivable\",\n                                          \"incurred\",\n                                          \"applied\",\n                                          \"Days\"),\n                                     all.x=TRUE),merge.list)\n    \n    # Tidy up ----------------------------------------------------------------\n    rm(list=setdiff(ls(), c(\"df\",\"t1\")))\n    for (i in 1:50) gc(reset=TRUE)\n    \n    # Create cumulative amounts for all variables ----------------------------\n    df <- df %>%\n      group_by(receivable) %>%\n      arrange(receivable,Days) %>%\n      mutate_at(vars(-isactive,-incurred,-applied,-Days),cumsum) %>%\n      data.table()\n    \n    # Clean up receivables that have defaults = 0\n    df <- df[Default!=0,]\n    \n    # Tidy up ----------------------------------------------------------------\n    rm(list=setdiff(ls(), c(\"df\",\"t1\")))\n    for (i in 1:50) gc(reset=TRUE)\n    \n    # Calculate the ycurrent variable ------------------------------------------\n    df <- df %>%\n      mutate(ycurrent =-(Principal_Recovery+Principal_Reversal)/\n               (Principal_Default+Principal_Adjustment-\n                  Principal_Adjustment_DeletionAdjustment)) %>%\n      data.table()\n    \n    # Fix NA values and set bounds of 0 and 1\n    df <- df[is.na(ycurrent),ycurrent:=1]\n    df <- df[ycurrent < 0,ycurrent:=0]\n    df <- df[ycurrent > 1,ycurrent:=1]\n    \n    # Calculate the yfinal variable -------------------------------------------\n    df <- df[,yfinal:=ycurrent[which.max(Days)],by=receivable]\n    \n    # Tidy up ----------------------------------------------------------------\n    rm(list=setdiff(ls(), c(\"df\",\"t1\")))\n    for (i in 1:50) gc(reset=TRUE)\n    \n# Visualizations -------------------------------------------------------------\n    \n    # Notes vs. Recoveries ---------------------------------------------------\n    df.note <- df %>%\n      filter(note > 0 & isactive==0) %>%\n      group_by(note) %>%\n      summarise(percent.recovered=mean(ycurrent))\n    \n    ggplot(df.note,aes(note,percent.recovered))+\n      geom_point(shape=1,colour=\"blue\")+\n      geom_smooth(method=\"loess\")+\n      scale_y_continuous(labels=percent)+\n      labs(title=\"% of Receivable Recovered vs. # of Notes\",\n           x=\"Number of Notes Applied to Debtor/Receivable\",\n           y=\"Average % of Receivable Recovered\")\n    \n    # Documents vs. Recoveries ----------------------------------------------\n    df.document <- df %>%\n      filter(document > 0 & isactive==0) %>%\n      group_by(document) %>%\n      summarise(percent.recovered=mean(ycurrent))\n    \n    ggplot(df.document,aes(document,percent.recovered))+\n      geom_point(shape=1,colour=\"red\")+\n      geom_smooth(method=\"loess\",colour=\"orange\")+\n      scale_y_continuous(labels=percent)+\n      labs(title=\"% of Receivable Recovered vs. # of Documents\",\n           x=\"Number of Documents Applied to Debtor/Receivable\",\n           y=\"Average % of Receivable Recovered\")\n    \n    # Print timer\n    t2 <- proc.time()\n    print(t2-t1)\n    \n    # Tidy up\n    rm(list=setdiff(ls(), c(\"df\")))\n    for (i in 1:50) gc(reset=TRUE)\n    save.image()    \n    \n\t\n# Feature generation ---------------------------------------------------------    \n    \n    # Add function to remove zero variance variables -------------------------\n    removeZeroVar <- function(dat) {\n      out <- lapply(dat, function(x) length(unique(x)))\n      want <- which(!out > 1)\n      unlist(want)\n    }\n    \n    # Create data.table without zero variance variables ----------------------\n    df.zv <- df[,-removeZeroVar(df),with=FALSE]\n    \n    write(names(df),file=\"names.csv\")\n\n    \n    \n      \n    \n    \n      \n\n    \n    \n    \n    \n    \n      \n    \n    \n\n    \n    \n    \n\n    \n    \n    \n    ",
    "created" : 1486760000771.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3269149055",
    "id" : "49C9B32F",
    "lastKnownWriteTime" : 1487014143,
    "last_content_update" : 1487014143178,
    "path" : "O:/FINANCE/FPAD/8 - Personal Files (PF)/PF - Ben/ARRMS/ARRM Collection Probability Forecast (CPF)/CPF/CollectionProbabilityForecast.R",
    "project_path" : "CollectionProbabilityForecast.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}