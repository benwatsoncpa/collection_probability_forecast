{
    "collab_server" : "",
    "contents" : "---\ntitle: \"EDA - Receivable Forecast\"\nauthor: \"Ben Watson\"\ndate: \"August 16, 2017\"\noutput:\n  html_document:\n    toc: true\n---\n\n```{r setup, include=FALSE,cache=FALSE}\n\n# Reset workspace & Load Libraries ----------------------------------------\n    \n  rm(list=ls())\n  for (i in 1:50) gc(reset=T)\n  \n  library(RODBC)\n  library(data.table)\n  library(zoo)\n  library(tm)\n  library(dplyr)\n  library(tidyr)\n  library(ggplot2)\n  library(scales)\n  library(caret)\n  library(caretEnsemble)\n  library(glmnet)\n  library(Matrix)\n  library(knitr)\n\n  # source(\"./routines/GetCleanData.R\",echo=T)\n\n  df <- fread(\"df.csv\")\n  df <- select(df,-incurred,-applied) # Remove non-numeric columns\n  \n```\n\n### Introduction\n\nThis is an exploratory data analysis of the account receivable data. Highly correlated variables and zero \nvariance variables are removed prior to regression analysis of the data.\n\n### Definitions\n\n* **ycurrent**: Amount of principle recovered to date.\n* **yfinal**: Amount of principle recovered at end of the receivables life.\n* **Days**: Number of days elapsed since default.\n* **ycurrent.lag3**: Amount recovered three steps into the future (y variable).\n* **Days.lag3**: Days elapsed three steps into the future.\n* **Days**: Number of days since the loan defaulted.\n* **df**: A 1,375,749 x 188 data frame containing all of the payments, notes, documents and cases applied against a receivable.\n\n**Sample values:**\n```{r,echo=T,cache=T}\n\nkable(data.frame(head(df,10))[,1:8])\n\n```\n\n### Remove Highly Correlated Variables\n\n```{r correlated vars, echo=TRUE,cache=T}\n\n# Remove zero variance columns ------------------------------------------------\n\n  df <- df[,sapply(df,var)!=0,with=FALSE]\n\n# Remove highly correlated columns --------------------------------------------\n  \n  cor.matrix <- cor(df)\n  cor.matrix[is.na(cor.matrix)] <- 0\n  cor.matrix[is.nan(cor.matrix)] <- 0\n  cor.cols <- findCorrelation(cor.matrix, cutoff = 0.8,exact=T,verbose=F)\n  print(names(df)[cor.cols]) # what am I removing?\n  \n  df <- select(df,-one_of(names(df)[cor.cols]))\n  \n  rm(list=setdiff(ls(),\"df\"))\n  for (i in 1:50) gc(reset=T)\n  \n```\n\n### Treat the percentage discretely\n:\n```{r discretize, echo=T,cache=T}\n\n# Treat the percentage discretely ---------------------------------------------\n  \n  df$ycurrent <- round(df$ycurrent,2)*100\n  df$yfinal <- round(df$yfinal,2)*100\n  \n```\n\n### Lag the ycurrent/Days variable by 3 steps\n\n```{r ycurrent and days lag, echo=T,cache=T}\n\n# Lag the ycurrent/Days variable by 3 steps  ----------------------------------\n  \n  df <- setorder(df,receivable,Days)\n  \n  i <- 3 # Set number of periods to shift\n  \n  df[,paste0(\"ycurrent.lag\",i,sep=''):=lead(ycurrent,i)-ycurrent,by=receivable]\n  df[,paste0(\"Days.lag\",i,sep=''):=lead(Days,i)-Days, by=receivable] \n  df <- df[is.na(ycurrent.lag3),paste0(\"ycurrent.lag\",i,sep=''):=ycurrent[which.max(Days)]-ycurrent,by=receivable]\n  df <- df[is.na(Days.lag3),paste0(\"Days.lag\",i,sep=''):=Days[which.max(Days)]-Days,by=receivable]\n  \n  for (i in 1:50) gc(reset=TRUE)\n\n```\n\n### Plot ycurrent.lag3\n\n```{r plot ycurrent, echo=T,cache=T}\n\n# Plot ycurrent.lag3 ----------------------------------------------------------\n  \n  df.vis <- df %>%\n    group_by(ycurrent.lag3) %>%\n    summarise(cnt=n()) %>%\n    mutate(log.cnt=log(cnt)) %>%\n    data.table()\n\n  clr <- \"cornflowerblue\"\n  \n  ggplot(df.vis,aes(ycurrent.lag3,log.cnt))+\n    geom_bar(stat=\"identity\",fill=clr,col=clr)+\n    labs(title=\"Log Frequency of Percent Recovered (Lagged 3 steps) \",\n         x=\"Percent Recovered after 3 steps/events\",\n         y=\"Log(Frequency)\")\n  \n    ggplot(df,aes(ycurrent.lag3))+\n    geom_density(col=\"blue\")\n    \n    print(paste(\"Mean of ycurrent.lag3:\",round(mean(df$ycurrent.lag3),1),sep=\"\"))\n    print(paste(\"Count of ycurrent.lag3 < 0 :\",sum(df$ycurrent.lag3<0),sep=\"\"))\n    \n\n```\n\n### Plot Days.lag3 \n\n```{r plot days,  echo=T,cache=T}\n# Plot Days.lag3 --------------------------------------------------------------\n  \n  df.vis <- df %>%\n    mutate(Months.lag3=round(Days.lag3/30,0)) %>%\n    group_by(Months.lag3) %>%\n    summarise(cnt=n()) %>%\n    mutate(log.cnt=log(cnt)) %>%\n    data.table()\n  \n  clr <- \"red\"\n  \n  ggplot(df.vis,aes(Months.lag3,log.cnt))+\n    geom_bar(stat=\"identity\",fill=clr,col=clr)+\n    labs(title=\"Log Frequency of Months Elapsed (Lagged 3 steps) \",\n         x=\"Months Elapsed after 3 steps/events\",\n         y=\"Log(Frequency)\")\n  \n```\n\n### Adjust response variable to be non-negative\n\n```{r Adjust response variable, echo=T,cache=T}\n\n# Create (non-negative) y variable for analysis -------------------------------\n    \n    adj <- abs(min(df$ycurrent.lag3))\n    df$ycurrent.poisson <- df$ycurrent.lag3 + adj\n    \n    rm(list=setdiff(ls(),\"df\"))\n    for (i in 1:50) gc(reset=TRUE)\n    \n    # What is the distribution of this variable?\n    library(fitdistrplus)\n    descdist(df$ycurrent.lag3,graph=TRUE)\n    \n```\n\n### GLMNET poisson for variable selection\n\n```{r, glmnet with offset,echo=T,include=T}\n\n  # Set up sparse matrix for glmnet -------------------------------------------\n\n  rm.vars <- c(\"ycurrent.poisson\",\"isactive\",\"ycurrent.lag3\",\"yfinal\",\"receivable\")\n  \n  sm <- dplyr::select(df, -one_of(rm.vars)) %>%\n    as.matrix(.) %>%\n    Matrix(sparse = T)\n\n  # Run glmnet ----------------------------------------------------------------\n  \n  glmnet.m1 <- cv.glmnet(x=sm,y=df$ycurrent.poisson,offset=log(df$Days.lag3+1))\n  \n  for (i in 1:50) gc(reset=TRUE)\n  \n  plot(glmnet.m1)\n  \n```\n\n### Show significant variables from glmnet \n\n```{r,echo=T,cache=T}\n\n# Show significant variables from glmnet ------------------------------------\n  \n  glmnet.coefs <- coef(glmnet.m1, s = \"lambda.min\") %>%\n    as.matrix() %>%\n    as.data.frame() %>%\n    mutate(coefs = row.names(.)) %>%\n    rename(val=`1`) %>%\n    filter(val!=0) %>%\n    data.table()\n\n  kable(glmnet.coefs)\n  \n  # Limit df to include only significant variables from glmnet ----------------\n  \n  glmnet.vars <- c(glmnet.coefs$coefs,\"ycurrent.poisson\")\n  glmnet.vars <- setdiff(glmnet.vars,\"(Intercept)\")\n  df <- select(df,one_of(glmnet.vars))\n  \n  rm(list=setdiff(ls(),\"df\"))\n  for (i in 1:50) gc(reset=TRUE)\n  \n```\n\n### GLM poisson and no Offset Variable\n\n```{r glm poisson,  echo=T,cache=T}\n\n  p1 <- glm(ycurrent.poisson~.,\n            data=df,\n            family=\"poisson\")\n  \n  explained.var <- ((p1$null.deviance-p1$deviance)/p1$null.deviance)*100\n  print(explained.var)\n  summary(p1)\n  \n  rm(list=setdiff(ls(),\"df\"))\n  for (i in 1:50) gc(reset=TRUE)\n\n```\n\n### GLM poisson with Offset Variable\n\n```{r glm poisson with offset,  echo=T,cache=T}\n  \n  p1 <- glm(ycurrent.poisson~.+offset(log(Days.lag3+1)),\n            data=df,\n            family=\"poisson\")\n  \n  explained.var <- ((p1$null.deviance-p1$deviance)/p1$null.deviance)*100\n  print(explained.var)\n  summary(p1)\n  \n  \n  rm(list=setdiff(ls(),\"df\"))\n  for (i in 1:50) gc(reset=TRUE)\n  \n```\n\n### Zero Inflated Models\n\nGiven the distribution of ycurrent.poisson, I did not think that the zero-inflated\nmodels would apply here (given that I had to adjust y to be non-negative).\n\n\n",
    "created" : 1503062815173.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3402355287",
    "id" : "A42827B5",
    "lastKnownWriteTime" : 1503434557,
    "last_content_update" : 1503508674439,
    "path" : "O:/FINANCE/FPAD/8 - Personal Files (PF)/PF - Ben/ARRMS/ARRM Collection Probability Forecast (CPF)/CPF/EDA.Rmd",
    "project_path" : "EDA.Rmd",
    "properties" : {
        "last_setup_crc32" : "A4152CFCd49e8ec1",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}